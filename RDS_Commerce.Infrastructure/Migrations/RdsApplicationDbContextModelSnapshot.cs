// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RDS_Commerce.Infrastructure.ORM.ContextSettings;

#nullable disable

namespace RDSCommerce.Infrastructure.Migrations
{
    [DbContext(typeof(RdsApplicationDbContext))]
    partial class RdsApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RDS_Commerce.Domain.Entities.AccountIdentity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id_accountIdentity");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("normalized_login");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cell_phone");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("cell_phone_confirmed");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("date")
                        .HasColumnName("registration_date");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("login");

                    b.HasKey("Id");

                    b.ToTable("AccountIdentity", "RDS");
                });

            modelBuilder.Entity("RDS_Commerce.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_client");

                    b.Property<bool>("AcceptTermsAndPolicy")
                        .HasColumnType("bit")
                        .HasColumnName("accept_terms_policies");

                    b.Property<DateTime>("AcceptanceOfTermsAndPolicies")
                        .HasColumnType("datetime2")
                        .HasColumnName("acceptance_Terms_and_policies");

                    b.Property<string>("AccountIdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("accountIdentity_id");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("document_namber");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("full_name");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("registration_date");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(3)
                        .HasColumnName("role");

                    b.HasKey("UserId");

                    b.HasIndex("AccountIdentityId")
                        .IsUnique();

                    b.ToTable("Client", "RDS");
                });

            modelBuilder.Entity("RDS_Commerce.Domain.Entities.Genus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Genus");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GenusName")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("genus_name");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Specie")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("specie");

                    b.HasKey("Id");

                    b.ToTable("Genus", "RDS");
                });

            modelBuilder.Entity("RDS_Commerce.Domain.Entities.Manager", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_manager");

                    b.Property<string>("AccountIdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("accountIdentity_id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("full_name");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("registration_date");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.HasKey("UserId");

                    b.HasIndex("AccountIdentityId")
                        .IsUnique();

                    b.ToTable("Manager", "RDS");
                });

            modelBuilder.Entity("RDS_Commerce.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_order");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("amount");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int")
                        .HasColumnName("order_status");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Order", "RDS");
                });

            modelBuilder.Entity("RDS_Commerce.Domain.Entities.OrderPlant", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("PlantId")
                        .HasColumnType("int")
                        .HasColumnName("plant_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("OrderId", "PlantId");

                    b.HasIndex("PlantId");

                    b.ToTable("OrderPlant", "RDS");
                });

            modelBuilder.Entity("RDS_Commerce.Domain.Entities.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_plant");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<string>("Description")
                        .IsUnicode(true)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    SqlServerPropertyBuilderExtensions.IsSparse(b.Property<string>("Description"));

                    b.Property<int?>("GenusId")
                        .HasColumnType("int")
                        .HasColumnName("genus_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("name");

                    b.Property<int>("PlantType")
                        .HasColumnType("int")
                        .HasColumnName("plant_type");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("price");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("registration_date");

                    b.Property<int>("VaseSize")
                        .HasColumnType("int")
                        .HasColumnName("vase_size");

                    b.HasKey("Id");

                    b.HasIndex("GenusId");

                    b.ToTable("Plant", "RDS");
                });

            modelBuilder.Entity("RDS_Commerce.Domain.Entities.PlantImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_fileImage");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("FileBytes")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("file_bytes");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("file_extension");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("file_name");

                    b.Property<bool>("MainImage")
                        .HasColumnType("bit")
                        .HasColumnName("main_image");

                    b.Property<int>("PlantId")
                        .HasColumnType("int")
                        .HasColumnName("plant_id");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("registration_date");

                    b.HasKey("Id");

                    b.HasIndex("PlantId");

                    b.ToTable("PlantImage", "RDS");
                });

            modelBuilder.Entity("RDS_Commerce.Domain.Entities.ShippingAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_shippingAddress");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("city");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("client_id");

                    b.Property<string>("Complement")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("complement");

                    b.Property<string>("Country")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("country");

                    b.Property<string>("District")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("district");

                    b.Property<string>("Number")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("number");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SelectedForShipping")
                        .HasColumnType("bit")
                        .HasColumnName("selected_for_shipping");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("char(2)")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("street");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("zip_code");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ShippingAddress", "RDS");
                });

            modelBuilder.Entity("RDS_Commerce.Domain.Entities.Client", b =>
                {
                    b.HasOne("RDS_Commerce.Domain.Entities.AccountIdentity", "AccountIdentity")
                        .WithOne()
                        .HasForeignKey("RDS_Commerce.Domain.Entities.Client", "AccountIdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountIdentity");
                });

            modelBuilder.Entity("RDS_Commerce.Domain.Entities.Manager", b =>
                {
                    b.HasOne("RDS_Commerce.Domain.Entities.AccountIdentity", "AccountIdentity")
                        .WithOne()
                        .HasForeignKey("RDS_Commerce.Domain.Entities.Manager", "AccountIdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountIdentity");
                });

            modelBuilder.Entity("RDS_Commerce.Domain.Entities.Order", b =>
                {
                    b.HasOne("RDS_Commerce.Domain.Entities.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("RDS_Commerce.Domain.Entities.OrderPlant", b =>
                {
                    b.HasOne("RDS_Commerce.Domain.Entities.Order", "Order")
                        .WithMany("OrderPlants")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RDS_Commerce.Domain.Entities.Plant", "Plant")
                        .WithMany("OrderPlants")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("RDS_Commerce.Domain.Entities.Plant", b =>
                {
                    b.HasOne("RDS_Commerce.Domain.Entities.Genus", "Genus")
                        .WithMany("Plants")
                        .HasForeignKey("GenusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Genus");
                });

            modelBuilder.Entity("RDS_Commerce.Domain.Entities.PlantImage", b =>
                {
                    b.HasOne("RDS_Commerce.Domain.Entities.Plant", null)
                        .WithMany("Images")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RDS_Commerce.Domain.Entities.ShippingAddress", b =>
                {
                    b.HasOne("RDS_Commerce.Domain.Entities.Client", null)
                        .WithMany("ShippingAddresses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RDS_Commerce.Domain.Entities.Client", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ShippingAddresses");
                });

            modelBuilder.Entity("RDS_Commerce.Domain.Entities.Genus", b =>
                {
                    b.Navigation("Plants");
                });

            modelBuilder.Entity("RDS_Commerce.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderPlants");
                });

            modelBuilder.Entity("RDS_Commerce.Domain.Entities.Plant", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("OrderPlants");
                });
#pragma warning restore 612, 618
        }
    }
}
